<Page
    x:Class="tpcalc.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:tpcalc"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    KeyDown="page_KeyDown"
    SizeChanged="page_SizeChanged"
    Loaded="page_Loaded"
    >

    <Page.Resources>
        <Style TargetType="TextBox">
            <Setter Property="IsSpellCheckEnabled" Value="False" />
            <Setter Property="IsTextPredictionEnabled" Value="False" />
        </Style>
        <Style TargetType="TextBlock">
            <Setter Property="TextTrimming" Value="CharacterEllipsis" />
            <Setter Property="TextWrapping" Value="Wrap" />
        </Style>
        <Style TargetType="RichTextBlock">
            <Setter Property="TextTrimming" Value="CharacterEllipsis" />
            <Setter Property="TextWrapping" Value="Wrap" />
        </Style>
        <Style TargetType="Button">
            <Setter Property="Background" Value="DimGray" />
        </Style>
    </Page.Resources>
    <StackPanel>
        <StackPanel x:Name="calcPanel" Width="352"> <!--explicit width needed by
        Page_Loaded; without it, calcPanel().ActualWidth() gives wrong result-->
            <StackPanel Margin="16,4,16,10" HorizontalAlignment="Center">
                <StackPanel Orientation="Horizontal">
                    <TextBox x:Name="input" PlaceholderText="Type in an expression, then press Enter" Width="288" Height="32" PreviewKeyDown="input_KeyDown" />
                    <Button x:Name="min_max_in_out_Button" Tag="none" Margin="8,0,0,0" Padding="0.5,0,0,0" Width="24" Height="32"
                            IsEnabled="False" Click="min_max_in_out_Click">▲</Button>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <StackPanel.Resources>
                        <Style TargetType="TextBlock">
                            <Setter Property="Margin" Value="0,8,0,0" />
                            <Setter Property="FontSize" Value="12" />
                        </Style>
                    </StackPanel.Resources>
                    <TextBlock x:Name="inputModeText" Width="200" />
                    <TextBlock x:Name="outputModeText" />
                </StackPanel>
                <StackPanel Orientation="Horizontal" Margin="0,8,0,0">
                    <TextBlock x:Name="outputType" FontSize="12" Width="45" Height="38" Padding="0,2,0,0"/>
                    <TextBlock x:Name="output" IsTextSelectionEnabled="True" Width="275" Height="38">
                        <TextBlock.ContextFlyout>
                            <MenuFlyout>
                                <MenuFlyoutItem Text="Copy" Icon="Copy" Click="output_Copy_Click">
                                    <MenuFlyoutItem.KeyboardAccelerators>
                                        <KeyboardAccelerator Key="C" Modifiers="Control" />
                                    </MenuFlyoutItem.KeyboardAccelerators>
                                </MenuFlyoutItem>
                            </MenuFlyout>
                        </TextBlock.ContextFlyout>
                    </TextBlock>
                </StackPanel>
            </StackPanel>
        </StackPanel>
        <Grid x:Name="XPanel" Margin="16,0,16,0" Visibility="Collapsed">
            <Grid x:Name="varsPanel" Visibility="Collapsed" BorderBrush="DimGray" BorderThickness="1" Padding="8,8,8,8">
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid Grid.Row="0" Margin="0,0,0,8" >
                    <RichTextBlock><Paragraph><Bold>Variables</Bold></Paragraph></RichTextBlock>
                    <Button Width="24" Height="24" Padding="0,0,0,0" HorizontalAlignment="Right" Click="vars_hide_vars_Click">X</Button>
                </Grid>
                <ScrollViewer Grid.Row="1">
                    <TextBlock x:Name="varsTextBlock" />
                </ScrollViewer>
            </Grid>
            <Grid x:Name="helpPanel" Visibility="Collapsed" BorderBrush="DimGray" BorderThickness="1" Padding="8,8,8,8">
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid Grid.Row="0" Margin="0,0,0,8" >
                    <RichTextBlock><Paragraph><Bold><Run x:Name="helpTitle">Help</Run></Bold></Paragraph></RichTextBlock>
                    <Button Width="24" Height="24" Padding="0,0,0,0" HorizontalAlignment="Right" Click="help_hide_help_Click">X</Button>
                </Grid>
                <ScrollViewer x:Name="help_quick_start_guide_basic" Grid.Row="1" Visibility="Collapsed">
                    <RichTextBlock x:Name="help_quick_start_guide_basic_TextBlock">
                        <Paragraph>
                            Type in an arithmetic expression and then press Enter to calculate the result.
                            <Bold>+</Bold>,
                            <Bold>-</Bold>,
                            <Bold>*</Bold>,
                            <Bold>/</Bold>,
                            <Bold>**</Bold>,
                            <Bold>!</Bold> and
                            <Bold>!!</Bold> are the addition, subtraction (or negation),
                            multiplication, division, exponentiation, factorial and double factorial operators
                            respectively. Examples:
                        </Paragraph>
                        <Paragraph Margin="20,0,0,0">
                            <LineBreak />
                            <Bold>2+3*4</Bold> means multiply 3 by 4 then add the result to 2
                            <LineBreak />
                            <LineBreak />
                            <Bold>(2+3)*4</Bold> means add 2 to 3 then multiply the result by 4
                            <LineBreak />
                            <LineBreak />
                            <Bold>-2-3/4</Bold> means divide 3 by 4 then subtract the result from -2
                            <LineBreak />
                            <LineBreak />
                            <Bold>pi*5**2</Bold> means square 5 (raise 5 to power of 2) then multiply the result by pi
                            <LineBreak />
                            <LineBreak />
                            <Bold>5**2**3</Bold> is equivalent to
                            <Bold>5**(2**3)</Bold> (exponentiation is right-associative)
                            <LineBreak />
                            <LineBreak />
                            <Bold>8!</Bold> means the factorial of 8; factorial can be applied generally
                            to positive real numbers; for example,
                            <Bold>8.2!</Bold> is valid
                            <LineBreak />
                            <LineBreak />
                            <Bold>8!!</Bold> means the double factorial of 8; double factorial can be
                            applied generally to positive real numbers; for example,
                            <Bold>8.2!!</Bold> is valid
                            <LineBreak />
                            <LineBreak />
                            <Bold>2*sin(1.8)</Bold> means 2 times the sine of 1.8
                            <LineBreak />
                            <LineBreak />
                            <Bold>avg(1,2,3,4,5,6,7,8,9)</Bold> means the average of 1,2,3,4,5,6,7,8,9
                        </Paragraph>
                        <Paragraph>
                            <LineBreak />The
                            <Bold>Scientific</Bold> menu has all of the available scientific functions.
                            <LineBreak />
                            <LineBreak />The
                            <Bold>Statistics</Bold> menu has all of the available statistical functions.
                            <LineBreak />
                            <LineBreak />The
                            <Bold>Values</Bold> menu has all of the available internal values (pi, e).
                            <LineBreak />
                            <LineBreak />The
                            <Bold>Operators</Bold> menu has all of the available operators.
                            <LineBreak />
                            <LineBreak />F3, when pressed from the expression input box, recalls the last entered
                            input. The Alt+Up Arrow and Alt+Down Arrow keys, when pressed from the expression
                            input box, recall up to the last 25 inputs.
                            <LineBreak />
                            <LineBreak />
                            <Hyperlink Click="help_quick_start_guide_advanced_Click">Next: Quick Start Guide - Advanced</Hyperlink>
                        </Paragraph>
                    </RichTextBlock>
                </ScrollViewer>
                <ScrollViewer x:Name="help_quick_start_guide_advanced" Grid.Row="1" Visibility="Collapsed">
                    <RichTextBlock x:Name="help_quick_start_guide_advanced_TextBlock">
                        <Paragraph>
                            By default, the calculator represents numbers internally in floating
                            point (abbreviated Flt. Pt.) format and performs floating point arithmetic on them;
                            such numbers are referred to simply as floating point (abbreviated Flt. Pt.).
                            This is the representation suitable for general calculations.
                            The calculator can also represent numbers internally as integers and perform
                            integer arithmetic and
                            <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Bitwise_operation">
                                bitwise logic</Hyperlink> on them; this can be useful to computer programmers;
                            such numbers are referred to simply as integers.
                            <LineBreak />
                            <LineBreak />The calculator can also accept numbers in several numeric bases:
                            binary, octal and hexadecimal in addition to decimal. The following are examples
                            of numbers specified in different bases:
                        </Paragraph>
                        <Paragraph Margin="20,0,0,0">
                            <LineBreak />
                            <Bold>0b1100100</Bold> specifies binary integer 1100100 (decimal 100)
                            <LineBreak />
                            <LineBreak />
                            <Bold>0o144</Bold> specifies octal integer 144 (decimal 100)
                            <LineBreak />
                            <LineBreak />
                            <Bold>0d100</Bold> specifies decimal integer 100 (not floating
                            point 100); 0d100.0 specifies decimal floating point 100.0
                            <LineBreak />
                            <LineBreak />
                            <Bold>0x64</Bold> specifies hexadecimal integer 64 (decimal 100);
                            0x64.0 specifies hexadecimal floating point 1.9p+6 (64.0 normalized)
                        </Paragraph>
                        <Paragraph>
                            <LineBreak />The following are examples of exclusive integer arithmetic and
                            <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Bitwise_operation">
                                bitwise logic</Hyperlink> operations (a and b represent integer numbers
                            in these examples):
                        </Paragraph>
                        <Paragraph Margin="20,0,0,0">
                            <LineBreak /><Bold>a/b</Bold>,
                            <Bold>a%b</Bold> yield respectively the integer
                            quotent and remainder (modulus) of a dividied by b
                            <LineBreak />
                            <LineBreak /><Bold>a&lt;&lt;b</Bold> means arithmetically shift left a by b
                            <LineBreak />
                            <LineBreak /><Bold>a&lt;&lt;&lt;b</Bold> means logically shift left a by b (equivalent to arithmetic shift left)
                            <LineBreak />
                            <LineBreak /><Bold>a&gt;&gt;b</Bold> means arithmetically shift right a by b
                            <LineBreak />
                            <LineBreak /><Bold>a&gt;&gt;&gt;b</Bold> means logically shift right a by b
                            <LineBreak />
                            <LineBreak /><Bold>a&amp;b</Bold> means bitwise and a with b
                            <LineBreak />
                            <LineBreak /><Bold>a|b</Bold> means bitwise or a with b
                            <LineBreak />
                            <LineBreak /><Bold>a^b</Bold> means bitwise xor a with b
                            <LineBreak />
                            <LineBreak /><Bold>~a</Bold> means bitwise not (bitwise negate) a
                        </Paragraph>
                        <Paragraph>
                            <LineBreak />The
                            <Bold>Mode</Bold> menu also allows an input mode to be selected
                            that determines how inputted numbers are interpreted and represented (numeric base;
                            floating point or integer); and allows an output mode to be selected that
                            determines the numeric base in which the result of calculations are output
                            (binary, octal, decimal or hexadecimal).
                            <LineBreak />
                            <LineBreak />The
                            <Bold><Hyperlink Click="help_numbers_Click">
                                Numbers</Hyperlink></Bold> section provides a detailed explanation of
                            input modes and how inputted numbers are interpreted and represented.
                        </Paragraph>
                        <Paragraph>
                            <LineBreak />
                            <Hyperlink Click="help_quick_start_guide_basic_Click">Previous: Quick Start Guide - Basic</Hyperlink><LineBreak />
                            <Hyperlink Click="help_variables_Click">Next: Variables</Hyperlink>
                        </Paragraph>
                    </RichTextBlock>
                </ScrollViewer>
                <ScrollViewer x:Name="help_variables" Grid.Row="1" Visibility="Collapsed">
                    <RichTextBlock>
                        <Paragraph>
                            Numbers and the results of expressions can be stored in
                            variables. For example, <Bold>r=6.8/2</Bold> stores the result of 6.8/2
                            in the variable "r". A variable can be used in expressions in place of
                            a number; for example, <Bold>pi*r**2</Bold> multiplies pi by r squared.
                            <LineBreak />
                            <LineBreak />A variable name begins with a letter or underscore
                            followed by 0 or more letters, digits or underscores; examples of
                            valid variable names are: "x", "max_x" and "x2". Variable names are
                            case-sensitive; for example, "x" and "X" are different variables.
                            <LineBreak />
                            <LineBreak />A variable can hide an internal value or function name; for
                            example, <Bold>pi=5</Bold> defines a variable named "pi" which hides the
                            internal value pi. A variable can be erased by specifying nothing after
                            the = sign; for example, <Bold>pi=</Bold> erases the variable "pi" and
                            un-hides the internal value pi. (Note: internal values cannot be erased;
                            repeating <Bold>pi=</Bold> does nothing.)
                            <LineBreak />
                            <LineBreak />The result of an assignment operation is the value (i.e., the
                            result of the expression) being assigned; this allows variable assignments
                            to be "chained"; for example, a=b=c=5 assigns 5 to a, b and c. Variable
                            erasure can't be chained; the effect of trying to do so, for example a=b=c=,
                            will be to erase the rightmost variable and set the others to the value of
                            the erased variable (or to nan (not-a-number) if none was actually erased).
                            <LineBreak />
                            <LineBreak />The <Bold>Variables</Bold> menu option shows the currently
                            defined variables.
                        </Paragraph>
                        <Paragraph>
                            <LineBreak />
                            <Hyperlink Click="help_quick_start_guide_advanced_Click">Previous: Quick Start Guide - Advanced</Hyperlink><LineBreak />
                            <Hyperlink Click="help_numbers_Click">Next: Numbers</Hyperlink>
                        </Paragraph>
                    </RichTextBlock>
                </ScrollViewer>
                <ScrollViewer x:Name="help_numbers" Grid.Row="1" Visibility="Collapsed">
                    <RichTextBlock>
                        <Paragraph>
                            This section is rather technical and assumes you have a basic
                            understanding of how computers represent numbers and perform arithmetic.
                            (If you don't, you can still use the calculator in its default mode,
                            which is suitable for general and scientific calculations. This section
                            will be more useful for those who want to perform integer arithmetic and
                            <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Bitwise_operation">
                                bitwise logic</Hyperlink> in a variety of numeric bases, or for those
                            who want to use hexadecimal floating point numbers.)
                            <LineBreak />
                            <LineBreak />A number is normally represented internally in
                            <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Double-precision_floating-point_format">
                                64 bit wide IEEE double precision floating point format</Hyperlink>; such numbers are
                            referred to simply as floating point. A number may also be represented internally as an
                            <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Integer_(computer_science)">
                                unsigned or signed two's compliment integer type, 8, 16, 32 or 64 bit</Hyperlink>;
                            such numbers are referred to simply as integers.
                            <LineBreak />
                            <LineBreak />The default integer type is signed 64 bit. Other types can be
                            selected from the
                            <Bold>Int. Type</Bold> menu. (Note: changing the integer
                            type will not affect how any integer variables are represented.)
                            <LineBreak />
                            <LineBreak />Technically, an integer is first represented as an unsigned 64 bit
                            integer type and then converted to the type selected in the
                            <Bold>Int. Type</Bold> menu, which by default is signed 64 bit integer. This is
                            to allow for numbers such as 0xffffffffffffffff (decimal -9223372036854775808)
                            to be specified, but also because negative numbers cannot be directly specified,
                            as '-' is the negation operator and not the negative sign (this has to do with
                            the expression parser). Thus -9223372036854775808 (minimum 64 bit signed integer)
                            is equivalent to -(9223372036854775808). (9223372036854775808 cannot be
                            represented as a signed 64 bit integer.)
                            <LineBreak />
                            <LineBreak />The initial representation of an integer as an unsigned
                            64 bit integer type is the only situation where integer range checking is
                            performed.
                            <LineBreak />
                            <LineBreak />A number can have a radix prefix to indicate it's numeric base
                            (radix). The supported radix prefixes are 0b for binary, 0o for octal,
                            0d for decimal and 0x for hexadecimal. For example, 0b1010, 0o12, 0d10 and
                            0xa all specify the decimal number 10.
                            <LineBreak />
                            <LineBreak />A decimal floating point number may be specified in
                            <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Scientific_notation#E_notation">
                                scientific E notation</Hyperlink>, for example the number 10000 can be specified
                            as 1e4, 1e+4, 1.0e4 or 1.0e+4; all are equivalent. The number 0.0001 can be specified
                            as 1e-4 or 1.0e-4; both are equivalent.
                            <LineBreak />
                            <LineBreak />A hexadecimal floating point number may be specified in
                            <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Hexadecimal#Hexadecimal_exponential_notation">
                                scientific P notation</Hyperlink>, for example, 2.710p12, 2.710p+12,
                            1.388p13 and 1.388p+13, which are all equivalent to decimal 10000 (the latter
                            two are normalized).
                            <LineBreak />
                            <LineBreak />An unadorned number&#x2014;one without a radix prefix, without a decimal
                            point and not specified in scientific notation, for example, 10&#x2014;can be either
                            floating point (normally) or an integer depending on the input mode (explained below).
                            <LineBreak />
                            <LineBreak />
                            <Underline>Floating Point Decimal Input</Underline>:
                            <LineBreak />
                            <LineBreak />Context: A number is specified with no radix prefix and the input mode in
                            the
                            <Bold>Mode</Bold> menu is
                            <Bold>Floating Point Decimal Input</Bold>.
                            <LineBreak />
                            <LineBreak />This is the default input mode. The number will be interpreted as decimal
                            and will be represented as floating point. For example, 10, 10.1 and 1e100 will all be
                            interpreted as decimal numbers and represented as floating point.
                            <LineBreak />
                            <LineBreak />
                            <Underline>Integer Binary Input</Underline>:
                            <LineBreak />
                            <LineBreak />Context: A number is specified with the 0b (binary) radix prefix, or is
                            specficied with no radix prefix and the input mode in the
                            <Bold>Mode</Bold> menu is
                            <Bold>Integer Binary Input</Bold>.
                            <LineBreak />
                            <LineBreak />Integers only are valid. The number will be interpreted as binary
                            and will be represented as an integer. A number with a
                            <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Radix_point">
                                radix point</Hyperlink> or that is specified in scientific notation is invalid
                            here. Examples: 0b1010 and 1010, which are equivalent to decimal 10, will be represented
                            as integers. 0b1010.1, 0b1010e1, 1010.1 and 1010e1 are invalid numbers here.
                            <LineBreak />
                            <LineBreak />
                            <Underline>Integer Octal Input</Underline>:
                            <LineBreak />
                            <LineBreak />Context: A number is specified with the 0o (octal) radix prefix or is
                            specified with no radix prefix and the input mode in the
                            <Bold>Mode</Bold> menu is
                            <Bold>Integer Octal Input</Bold>.
                            <LineBreak />
                            <LineBreak />Integers only are valid. The number will be interpreted as octal
                            and will be represented as an integer. A number with a
                            <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Radix_point">
                                radix point</Hyperlink> or that is specified in scientific notation is invalid
                            here. Examples: 0o12 and 12, which are equivalent to decimal 10, will be represented
                            as integers. 0o12.1, 0o12e1, 12.1 and 12e1 are invalid numbers here.
                            <LineBreak />
                            <LineBreak />
                            <Underline>Integer/Flt. Pt. Decimal Input</Underline>:
                            <LineBreak />
                            <LineBreak />Context: A number is specified with the 0d (decimal) radix prefix or is specified
                            with no radix prefix and the input mode in the
                            <Bold>Mode</Bold> menu is
                            <Bold>Integer/Flt. Pt. Decimal Input</Bold>.
                            <LineBreak />
                            <LineBreak />The number will be interpreted as decimal and will be represented
                            as either an integer or as floating point according to the following:
                            <LineBreak />
                            <LineBreak />If the number has no decimal point and is not specified in scientific notation
                            then it will be represented as an integer. For example, 0d10 and 10 will be represented
                            as integers.
                            <LineBreak />
                            <LineBreak />If the number has a decimal point or is specified in scientific E notation
                            then it will be represented as floating point. For example, 0d10., 0d10.0, 0d1e100, 10.,
                            10.0 and 1e100 will all be represented as floating point.
                            <LineBreak />
                            <LineBreak />
                            <Underline>Integer/Flt. Pt. Hexecimal Input</Underline>:
                            <LineBreak />
                            <LineBreak />Context: A number is specified with the 0x (hexadecimal) radix prefix or is
                            specified with no radix prefix and the input mode in the
                            <Bold>Mode</Bold> menu is
                            <Bold>Integer/Flt. Pt. Hexadecimal Input</Bold>.
                            <LineBreak />
                            <LineBreak />The number will be interpreted as hexadecimal and will be represented
                            as either an integer or as floating point according to the following:
                            <LineBreak />
                            <LineBreak />If the number has no
                            <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Radix_point">
                                radix point</Hyperlink> and is not specified in scientific notation then it will
                            be represented as an integer. For example, 0xa and 0a, which are equivalent to decimal
                            10, will be represented as integers.
                            <LineBreak />
                            <LineBreak />If the number has a
                            <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Radix_point">
                                radix point</Hyperlink> or is specified in scientific P notation then it will be
                            represented as floating point. For example, 0x2710., 0x2710.0 and 0x1.388p13,
                            which are all equivalent to decimal 10000, will all be represented as floating point.
                            <LineBreak />
                            <LineBreak />The hexadecimal digits corresponding to decimal numbers 10-15 are a-f
                            (or A-F) per common convention. Notes: If a hexadecimal number begins with a letter
                            (a-f) and is specified without the 0x radix prefix, then it must be specified with
                            a leading 0 to distinguish it from a variable/function/value name; thus "0a" is the
                            hexadecimal number a (decimal 10) and "a" is the name of the variable a. Note
                            regarding
                            <Bold>Integer/Flt. Pt. Hexadecimal Input</Bold> mode: Because 0b is a valid
                            hexadecimal number, it won't be recognized as the binary radix prefix in this mode;
                            thus binary numbers cannot be specified in this mode.
                            <LineBreak />
                            <LineBreak />
                            <Underline>Output Mode</Underline>:
                            <LineBreak />
                            <LineBreak />The
                            <Bold>Mode</Bold> menu allows an output mode to be selected that
                            determines the numeric base in which the result of calculations are output (binary,
                            octal, decimal or hexadecimal). Floating point numbers ouput in binary, octal or
                            hexadecimal will be done so in
                            <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Hexadecimal#Hexadecimal_exponential_notation">
                                normalized scientific P notation</Hyperlink>.
                        </Paragraph>
                        <Paragraph>
                            <LineBreak />
                            <Hyperlink Click="help_variables_Click">Previous: Variables</Hyperlink><LineBreak />
                            <Hyperlink Click="help_fp_and_integer_arithmetic_operators_Click">Next: Floating Point and Integer Arithmetic Operators</Hyperlink>
                        </Paragraph>
                    </RichTextBlock>
                </ScrollViewer>
                <ScrollViewer x:Name="help_fp_and_integer_arithmetic_operators" Grid.Row="1" Visibility="Collapsed">
                    <RichTextBlock>
                        <Paragraph Margin="20,0,0,0">
                            <Bold>+</Bold> Addition
                            <LineBreak />
                            <LineBreak /><Bold>-</Bold> Subtraction or negation
                            <LineBreak />
                            <LineBreak /><Bold>*</Bold> Multiplication
                            <LineBreak />
                            <LineBreak /><Bold>/</Bold> Division
                        </Paragraph>
                        <Paragraph>
                            <LineBreak />These operators accept floating point or integer values. If
                            either value is floating point then the the other value, if an integer,
                            will be converted to floating point, the operation will be performed using
                            floating point arithmetic and the result will be a floating point value.
                            If both values are integers then the operation will be performed using
                            integer arithmetic and the result will be an integer value.
                        </Paragraph>
                        <Paragraph>
                            <LineBreak />
                            <Hyperlink Click="help_numbers_Click">Previous: Numbers</Hyperlink><LineBreak />
                            <Hyperlink Click="help_fp_arithmetic_operators_Click">Next: Floating Point Arithmetic Operators</Hyperlink>
                        </Paragraph>
                    </RichTextBlock>
                </ScrollViewer>
                <ScrollViewer x:Name="help_fp_arithmetic_operators" Grid.Row="1" Visibility="Collapsed">
                    <RichTextBlock>
                        <Paragraph Margin="20,0,0,0">
                            <Bold>**</Bold> Exponentiation
                            <LineBreak />
                            <LineBreak /><Bold>!</Bold>
                            <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Factorial">
                                Factorial (extended to real numbers)</Hyperlink>
                            <LineBreak />
                            <LineBreak /><Bold>!!</Bold>
                            <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Double_factorial">
                                Double factorial (extended to real numbers)</Hyperlink>
                        </Paragraph>
                        <Paragraph>
                            <LineBreak />Integer values will be converted to floating point, the 
                            operation will be performed using floating point arithmetic and the result
                            will be a floating point value. These operators always operate in the
                            floating point domain because of how easily calculations can "blow up" and
                            become larger than integers can support; also, factorials are implemented
                            using the gamma function to support factorials of real numbers with
                            fractional components (for example, 3.4!). The factorial for real numbers is
                            given by the formula gamma(n+1), and the double factorial for real numbers
                            is given by the formula
                            2**((1+2*n-cos(pi*n))/4)*pi**((cos(pi*n)-1)/4)*gamma(1+n/2), the latter
                            which is the formula for "complex arguments" given at
                            <Hyperlink NavigateUri="https://mathworld.wolfram.com/DoubleFactorial.html">
                                Wolfram Mathworld</Hyperlink>.
                        </Paragraph>
                        <Paragraph>
                            <LineBreak />
                            <Hyperlink Click="help_fp_and_integer_arithmetic_operators_Click">Previous: Floating Point and Integer Arithmetic Operators</Hyperlink><LineBreak />
                            <Hyperlink Click="help_integer_arithmetic_and_bitwise_logic_operators_Click">Next: Integer Arithmetic and Bitwise Logic Operators</Hyperlink>
                        </Paragraph>
                    </RichTextBlock>
                </ScrollViewer>
                <ScrollViewer x:Name="help_integer_arithmetic_and_bitwise_logic_operators" Grid.Row="1" Visibility="Collapsed">
                    <RichTextBlock>
                        <Paragraph Margin="20,0,0,0">
                            <Bold>%</Bold> Modulo (x%y is the remainder of x/y)
                            <LineBreak />
                            <LineBreak /><Bold>&lt;&lt;</Bold> Arithmetic shift left
                            <LineBreak />
                            <LineBreak /><Bold>&lt;&lt;&lt;</Bold> Logical shift left (equivalent to arithmetic shift left)
                            <LineBreak />
                            <LineBreak /><Bold>&gt;&gt;</Bold> Arithmetic shift right
                            <LineBreak />
                            <LineBreak /><Bold>&gt;&gt;&gt;</Bold> Logical shift right
                            <LineBreak />
                            <LineBreak /><Bold>&amp;</Bold> <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Bitwise_operation">
                                Bitwise</Hyperlink> and
                            <LineBreak />
                            <LineBreak /><Bold>|</Bold> Bitwise or
                            <LineBreak />
                            <LineBreak /><Bold>^</Bold> Bitwise xor
                            <LineBreak />
                            <LineBreak /><Bold>~</Bold> Bitwise unary not
                        </Paragraph>
                        <Paragraph>
                            <LineBreak />These operators accept integer values only; floating point
                            values are invalid for these.
                        </Paragraph>
                        <Paragraph>
                            <LineBreak />
                            <Hyperlink Click="help_fp_arithmetic_operators_Click">Previous: Floating Point Arithmetic Operators</Hyperlink><LineBreak />
                            <Hyperlink Click="help_scientific_functions_Click">Next: Scientific Functions</Hyperlink>
                        </Paragraph>
                    </RichTextBlock>
                </ScrollViewer>
                <ScrollViewer x:Name="help_scientific_functions" Grid.Row="1" Visibility="Collapsed">
                    <RichTextBlock>
                        <Paragraph>
                            The calculator provides a variety of scientific functions
                            such as log, sin, cos, etc., which operate on floating point parameters.
                            <LineBreak />
                            <LineBreak />The syntax of each function is &lt;name&gt;(&lt;parameter&gt;)
                            where &lt;name&gt; is the name of the function and &lt;parameter&gt; is a
                            number or expression; examples: sin(2), log(3/2), sqrt(5**2).
                            <LineBreak />
                            <LineBreak />For each function, if the parameter is an integer one then it
                            will be converted to floating point. Also, the result of each function will
                            be a floating point value.
                            <LineBreak />
                            <LineBreak />The complete set of scientific functions is available for
                            reference below and in the <Bold>Scientific</Bold> menu. The scientific
                            functions are:
                        </Paragraph>
                        <Paragraph Margin="20,0,0,0">
                            <LineBreak /><Bold>exp</Bold> - e**n
                            <LineBreak /><Bold>log</Bold> - Natural (base e) logarithm
                            <LineBreak /><Bold>log10</Bold> - Base 10 logarithm
                            <LineBreak /><Bold>log2</Bold> - Base 2 logarithm
                            <LineBreak /><Bold>sqrt</Bold> - Square root
                            <LineBreak /><Bold>cbrt</Bold> - Cubic root
                            <LineBreak /><Bold>sin</Bold> - Sine
                            <LineBreak /><Bold>cos</Bold> - Cosine
                            <LineBreak /><Bold>tan</Bold> - Tangent
                            <LineBreak /><Bold>asin</Bold> - Arcsine
                            <LineBreak /><Bold>acos</Bold> - Arccosine
                            <LineBreak /><Bold>atan</Bold> - Arctangent
                            <LineBreak /><Bold>sinh</Bold> - Hyperbolic sine
                            <LineBreak /><Bold>cosh</Bold> - Hyperbolic cosine
                            <LineBreak /><Bold>tanh</Bold> - Hyperbolic tangent
                            <LineBreak /><Bold>asinh</Bold> - Inverse hyperbolic sine
                            <LineBreak /><Bold>acosh</Bold> - Inverse hyperbolic cosine
                            <LineBreak /><Bold>atanh</Bold> - Inverse hyperbolic tangent
                            <LineBreak /><Bold>gamma</Bold> - Gamma
                            <LineBreak /><Bold>lgamma</Bold> - Log gamma
                        </Paragraph>
                        <Paragraph>
                            <LineBreak />
                            <Hyperlink Click="help_integer_arithmetic_and_bitwise_logic_operators_Click">Previous: Integer Arithmetic and Bitwise Logic Operators</Hyperlink><LineBreak />
                            <Hyperlink Click="help_statistical_functions_Click">Next: Statistical Functions</Hyperlink>
                        </Paragraph>
                    </RichTextBlock>
                </ScrollViewer>
                <ScrollViewer x:Name="help_statistical_functions" Grid.Row="1" Visibility="Collapsed">
                    <RichTextBlock>
                        <Paragraph>
                            The calculator provides a variety of statistical functions
                            such as avg, stddev, mode, etc., which operate on lists of numbers.
                            <LineBreak />
                            <LineBreak />The syntax of each function is &lt;name&gt;&lt;list&gt; where &lt;name&gt;
                            is the name of the function, and &lt;list&gt; is a list of comma delimited
                            parameters enclosed in parenthesis, where each parameter is a number or
                            expression; for example: avg(2,e,pi,3/2,sqrt(5**2)) computes the average of
                            2, e, pi, 3/2 and sqrt(5**2).
                            <LineBreak />
                            <LineBreak />For each statistical function, any integer
                            parameters will be converted to floating point, and the result will be
                            a floating point value, except in the case where the mode function
                            finds more than one mode, then the result will be another list.
                            <LineBreak />
                            <LineBreak />Lists can be stored in variables, which can be used in
                            statistical functions; for example:
                        </Paragraph>
                        <Paragraph Margin="20,0,0,0">
                            l=(1,2,3,4,5,6,7,8,9)
                            <LineBreak />avg(l)
                            <LineBreak />median(l)
                            <LineBreak />stddev(l)
                        </Paragraph>
                        <Paragraph>
                            Note that the parenthesis around the list are required.
                        </Paragraph>
                        <Paragraph>
                            <LineBreak />The complete set of statistical functions is available for
                            reference below and in the <Bold>Statistics</Bold> menu. The statistical
                            functions are:
                        </Paragraph>
                        <Paragraph Margin="20,0,0,0">
                            <LineBreak /><Bold>sum</Bold> - Sum
                            <LineBreak /><Bold>prod</Bold> - Product
                            <LineBreak /><Bold>avg</Bold> - Average (<Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Arithmetic_mean">
                                Arithmetic Mean</Hyperlink>)
                            <LineBreak /><Bold>geomean</Bold> - <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Geometric_mean">
                                Geometric Mean</Hyperlink>
                            <LineBreak /><Bold>harmmean</Bold> - <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Harmonic_mean">
                                Harmonic Mean</Hyperlink>
                            <LineBreak /><Bold>variance</Bold> - Sample <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Variance">
                                Variance</Hyperlink>
                            <LineBreak /><Bold>stddev</Bold> - Sample <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Standard_deviation">
                                Standard Deviation</Hyperlink>
                            <LineBreak /><Bold>pvariance</Bold> - Population <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Variance">
                                Variance</Hyperlink>
                            <LineBreak /><Bold>pstddev</Bold> - Population <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Standard_deviation">
                                Standard Deviation</Hyperlink>
                            <LineBreak /><Bold>median</Bold> - <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Median">
                                Median</Hyperlink>
                            <LineBreak /><Bold>mode</Bold> - <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Mode_(statistics)">
                                Mode</Hyperlink>
                            <LineBreak /><Bold>min</Bold> - Minimum (Smallest) Value
                            <LineBreak /><Bold>max</Bold> - Maximum (Largest) Value
                            <LineBreak /><Bold>quartile1</Bold> - First <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Quartile">
                                Quartile</Hyperlink> (Q1) 25%
                            <LineBreak /><Bold>quartile2</Bold> - Second <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Quartile">
                                Quartile</Hyperlink> (Q2) 50%
                            <LineBreak /><Bold>quartile3</Bold> - Third <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Quartile">
                                Quartile</Hyperlink> (Q3) 75%
                            <LineBreak /><Bold>iqr</Bold> - <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Interquartile_range">
                                Interquartile Range</Hyperlink>
                            <LineBreak /><Bold>range</Bold> - <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Range_(statistics)">
                                Range</Hyperlink>
                            <LineBreak /><Bold>madmean</Bold> - <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Average_absolute_deviation#Mean_absolute_deviation_around_the_mean">
                                Mean Absolute Deviation</Hyperlink>
                            <LineBreak /><Bold>madmed</Bold> - <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Median_absolute_deviation">
                                Median Absolute Deviation</Hyperlink>
                            <LineBreak /><Bold>qdev</Bold> - Quartile Deviation (Q1-Q3)/2
                        </Paragraph>
                        <Paragraph>
                            <LineBreak />The calculator uses
                                <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm">
                                    Welford's online algorithm</Hyperlink> to avoid the catastrophic cancellation described in
                            the <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance">
                                main article</Hyperlink>.
                            <LineBreak /><LineBreak />The calculator uses Method 4 described in the
                            <Hyperlink NavigateUri="https://en.wikipedia.org/wiki/Quartile">
                                Wikipedia article for quartiles</Hyperlink> to compute quartiles.
                            <LineBreak /><LineBreak />
                            <Hyperlink Click="help_scientific_functions_Click">Previous: Scientific Functions</Hyperlink><LineBreak />
                            <Hyperlink Click="help_operator_precedence_and_associativity_Click">Next: Operator Precedence and Associativity</Hyperlink>
                        </Paragraph>
                    </RichTextBlock>
                </ScrollViewer>
                <ScrollViewer x:Name="help_operator_precedence_and_associativity" Grid.Row="1" Visibility="Collapsed">
                    <RichTextBlock>
                        <Paragraph>
                            Binary (two-operand) operators associate left to right except for
                            exponentiation and assignment, which associate right to left. Operators are listed
                            from highest to lowest precedence:
                        </Paragraph>
                        <Paragraph Margin="20,0,0,0">
                            <LineBreak />1: <Bold>!</Bold>, <Bold>!!</Bold> factorial, double factorial (unary postfix operators)
                            <LineBreak />
                            <LineBreak />2: <Bold>**</Bold> exponentiation (right associative)
                            <LineBreak />
                            <LineBreak />3: <Bold>+</Bold>, <Bold>-</Bold>, <Bold>~</Bold> unary plus, negation,
                            bitwise not (bitwise negation) (unary prefix operators)
                            <LineBreak />
                            <LineBreak />4: <Bold>*</Bold>, <Bold>/</Bold>, <Bold>%</Bold> multiplication, division, modulo
                            <LineBreak />
                            <LineBreak />5: <Bold>+</Bold>, <Bold>-</Bold> addition, subtraction
                            <LineBreak />
                            <LineBreak />6: <Bold>&lt;&lt;</Bold>, <Bold>&lt;&lt;&lt;</Bold>, <Bold>&gt;&gt;</Bold>, <Bold>&gt;&gt;&gt;</Bold>
                            arithmetic shift left, logical shift left (arithmetic and logical shift are equivalent), arithmetic shift right,
                            logical shift right
                            <LineBreak />
                            <LineBreak />7: <Bold>&amp;</Bold> bitwise and
                            <LineBreak />
                            <LineBreak />8: <Bold>^</Bold> bitwise xor
                            <LineBreak />
                            <LineBreak />9: <Bold>|</Bold> bitwise or
                            <LineBreak />
                            <LineBreak />10: <Bold>=</Bold> assignmemt
                        </Paragraph>
                        <Paragraph>
                            <LineBreak />
                            <Hyperlink Click="help_statistical_functions_Click">Previous: Statistical Functions</Hyperlink><LineBreak />
                            <Hyperlink Click="help_quick_start_guide_basic_Click">Top: Quick Start Guide - Basic</Hyperlink>
                        </Paragraph>                    
                    </RichTextBlock>            
                </ScrollViewer>            
            </Grid>
        </Grid>
    </StackPanel>
    <Page.BottomAppBar>
        <CommandBar x:Name="bottomAppBar" FlowDirection="LeftToRight" DefaultLabelPosition="Right">
            <AppBarButton Label="Mode">
                <AppBarButton.Flyout>
                    <MenuFlyout Opening="mode_menu_Opening">
                        <MenuFlyoutItem x:Name="input_mode_fpd" Tag="fpd" Text="Floating Point Decimal Input" Click="input_mode_Click" />
                        <MenuFlyoutItem x:Name="input_mode_bin" Tag="bin" Text="Integer Binary Input" Click="input_mode_Click" />
                        <MenuFlyoutItem x:Name="input_mode_oct" Tag="oct" Text="Integer Octal Input" Click="input_mode_Click" />
                        <MenuFlyoutItem x:Name="input_mode_dec" Tag="dec" Text="Integer/Flt. Pt. Decimal Input" Click="input_mode_Click" />
                        <MenuFlyoutItem x:Name="input_mode_hex" Tag="hex" Text="Integer/Flt. Pt. Hexadecimal Input" Click="input_mode_Click" />
                        <MenuFlyoutSeparator />
                        <MenuFlyoutItem x:Name="output_mode_bin" Tag="bin" Text="Binary Output" Click="output_mode_Click" />
                        <MenuFlyoutItem x:Name="output_mode_oct" Tag="oct" Text="Octal Output" Click="output_mode_Click" />
                        <MenuFlyoutItem x:Name="output_mode_dec" Tag="dec" Text="Decimal Output" Click="output_mode_Click" />
                        <MenuFlyoutItem x:Name="output_mode_hex" Tag="hex" Text="Hexadecimal Output" Click="output_mode_Click" />
                    </MenuFlyout>
                </AppBarButton.Flyout>
            </AppBarButton>
            <AppBarButton Label="Scientific">
                <AppBarButton.Flyout>
                    <MenuFlyout>
                        <MenuFlyoutItem Tag="exp(" Text="exp - e**n" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="log(" Text="log - Natural (Base e) Logarithm" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="log10(" Text="log10 - Base 10 Logarithm" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="log2(" Text="log2 - Base 2 Logarithm" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="sqrt(" Text="sqrt - Square Root" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="cbrt(" Text="cbrt - Cubic Root" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="sin(" Text="sin - Sine" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="cos(" Text="cos - Cosine" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="tan(" Text="tan - Tangent" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="asin(" Text="asin - Arcsine" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="acos(" Text="acos - Arccosine" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="atan(" Text="atan - Arctangent" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="sinh(" Text="sinh - Hyperbolic Sine" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="cosh(" Text="cosh - Hyperbolic Cosine" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="tanh(" Text="tanh - Hyperbolic Tangent" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="asinh(" Text="asinh - Inverse Hyperbolic Sine" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="acosh(" Text="acosh - Inverse Hyperbolic Cosine" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="atanh(" Text="atanh - Inverse Hyperbolic Tangent" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="gamma(" Text="gamma - Gamma" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="lgamma(" Text="lgamma - Log Gamma" Click="append_tag_to_input_Click" />
                    </MenuFlyout>
                </AppBarButton.Flyout>
            </AppBarButton>
            <AppBarButton Label="Statistical">
                <AppBarButton.Flyout>
                    <MenuFlyout>
                        <MenuFlyoutItem Tag="sum(" Text="sum - Sum" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="prod(" Text="prod - Product" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="avg(" Text="avg - Average (Arithmetic Mean)" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="geomean(" Text="geomean - Geometric Mean" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="harmmean(" Text="harmmean - Harmonic Mean" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="variance(" Text="variance - Sample Variance" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="stddev(" Text="stddev - Sample Standard Deviation" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="pvariance(" Text="pvariance - Population Variance" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="pstddev(" Text="pstddev - Population Standard Deviation" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="median(" Text="median - Median" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="mode(" Text="mode - Mode" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="min(" Text="min - Minimum (Smallest) Value" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="max(" Text="max - Maximum (Largest) Value" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="quartile1(" Text="quartile1 - First Quartile (Q1) 25%" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="quartile2(" Text="quartile2 - Second Quartile (Q2) 50%" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="quartile3(" Text="quartile3 - Third Quartile (Q3) 75%" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="iqr(" Text="iqr - Interquartile Range" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="range(" Text="range - Range" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="madmean(" Text="madmean - Mean Absolute Deviation" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="madmed(" Text="madmed - Median Absolute Deviation" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="qdev(" Text="qdev - Quartile Deviation" Click="append_tag_to_input_Click" />
                    </MenuFlyout>
                </AppBarButton.Flyout>
            </AppBarButton>
            <AppBarButton Label="Values">
                <AppBarButton.Flyout>
                    <MenuFlyout>
                        <MenuFlyoutItem Tag="pi" Text="pi - 3.14..." Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="e" Text="e - Euler's Number" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="last" Text="last - Last Evaluated Value" Click="append_tag_to_input_Click" />
                    </MenuFlyout>
                </AppBarButton.Flyout>
            </AppBarButton>
            <AppBarButton Label="Operators">
                <AppBarButton.Flyout>
                    <MenuFlyout>
                        <MenuFlyoutItem Tag="+" Text="+  Addition" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="-" Text="-  Subtraction or Negation" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="*" Text="*  Multiplication" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="/" Text="/  Division" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="%" Text="%  Modulo" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="**" Text="**  Exponentiation" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="!" Text="!  Factorial" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="!!" Text="!!  Double Factorial" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="=" Text="=  Assign to Variable" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="&amp;" Text="&amp;  Bitwise And" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="|" Text="|  Bitwise Or" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="^" Text="^  Bitwise Xor" Click="append_tag_to_input_Click" />
                        <MenuFlyoutItem Tag="~" Text="~  Bitwise Not" Click="append_tag_to_input_Click" />
                    </MenuFlyout>
                </AppBarButton.Flyout>
            </AppBarButton>
            <AppBarButton Label="Int. Type">
                <AppBarButton.Flyout>
                    <MenuFlyout Opening="integer_result_type_menu_Opening">
                        <MenuFlyoutItem x:Name="integer_result_type_int8" Tag="int8" Text="Int8 - Signed 8 Bit Integer" Click="integer_result_type_Click" />
                        <MenuFlyoutItem x:Name="integer_result_type_uint8" Tag="uint8" Text="UInt8 - Unsigned 8 Bit Integer" Click="integer_result_type_Click" />
                        <MenuFlyoutItem x:Name="integer_result_type_int16" Tag="int16" Text="Int16 - Signed 16 Bit Integer" Click="integer_result_type_Click" />
                        <MenuFlyoutItem x:Name="integer_result_type_uint16" Tag="uint16" Text="UInt16 - Unsigned 16 Bit Integer" Click="integer_result_type_Click" />
                        <MenuFlyoutItem x:Name="integer_result_type_int32" Tag="int32" Text="Int32 - Signed 32 Bit Integer" Click="integer_result_type_Click" />
                        <MenuFlyoutItem x:Name="integer_result_type_uint32" Tag="uint32" Text="UInt32 - Unsigned 32 Bit Integer" Click="integer_result_type_Click" />
                        <MenuFlyoutItem x:Name="integer_result_type_int64" Tag="int64" Text="Int64 - Signed 64 Bit Integer" Click="integer_result_type_Click" />
                        <MenuFlyoutItem x:Name="integer_result_type_uint64" Tag="uint64" Text="UInt64 - Unsigned 64 Bit Integer" Click="integer_result_type_Click" />
                    </MenuFlyout>
                </AppBarButton.Flyout>
            </AppBarButton>
            <AppBarButton x:Name="varsButton" Tag="vars_show" Label="Variables" Click="vars_Click" />
            <AppBarButton Label="Help">
                <AppBarButton.Flyout>
                    <MenuFlyout Opening="help_menu_Opening">
                        <MenuFlyoutItem Tag="help_quick_start_guide_basic" Text="Quick Start Guide - Basic" Click="help_Click" />
                        <MenuFlyoutItem Tag="help_quick_start_guide_advanced" Text="Quick Start Guide - Advanced" Click="help_Click" />
                        <MenuFlyoutItem Tag="help_variables" Text="Variables" Click="help_Click" />
                        <MenuFlyoutItem Tag="help_numbers" Text="Numbers" Click="help_Click" />
                        <MenuFlyoutItem Tag="help_fp_and_integer_arithmetic_operators" Text="Floating Point and Integer Arithmetic Operators" Click="help_Click" />
                        <MenuFlyoutItem Tag="help_fp_arithmetic_operators" Text="Floating Point Arithmetic Operators" Click="help_Click" />
                        <MenuFlyoutItem Tag="help_integer_arithmetic_and_bitwise_logic_operators" Text="Integer Arithmetic and Bitwise Logic Operators" Click="help_Click" />
                        <MenuFlyoutItem Tag="help_scientific_functions" Text="Scientific Functions" Click="help_Click" />
                        <MenuFlyoutItem Tag="help_statistical_functions" Text="Statistical Functions" Click="help_Click" />
                        <MenuFlyoutItem Tag="help_operator_precedence_and_associativity" Text="Operator Precedence and Associativity" Click="help_Click" />
                        <MenuFlyoutItem x:Name="help_menu_hide_help" Tag="help_hide_help" Text="Hide Help" Click="help_Click" />
                    </MenuFlyout>
                </AppBarButton.Flyout>
            </AppBarButton>
        </CommandBar>
    </Page.BottomAppBar>
</Page>
